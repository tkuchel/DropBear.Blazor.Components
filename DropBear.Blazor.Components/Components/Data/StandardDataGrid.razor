@inject IJSRuntime JsRuntime
@using DropBear.Blazor.Components.Enums
@using Microsoft.JSInterop
@typeparam TItem
@namespace DropBear.Blazor.Components.Components.Data


<div class="data-grid @(Theme == ThemeType.Dark ? "dark-theme" : "light-theme")">
    @if (IsLoading)
    {
        @LoadingTemplate
    }
    else if (!Items.Any())
    {
        @NoDataTemplate
    }
    else
    {
        <div class="grid-container" @onkeydown="OnKeyDown" tabindex="0">
            <table>
                <thead>
                <tr>
                    @if (AllowSelection)
                    {
                        <th class="selection-column">
                            <div class="checkbox-container">
                                <input type="checkbox" checked="@AreAllSelected" @onchange="ToggleAllSelection" title="Select All">
                            </div>
                        </th>
                    }
                    @foreach (var column in Columns)
                    {
                        <th class="@(column.Sortable ? "sortable" : "")" @onclick="() => Sort(column)" style="width: @(column.Width)px;">
                            @column.Title
                            @if (column.Sortable)
                            {
                                <i class="fas fa-sort sort-icon @GetSortIconClass(column)"></i>
                            }
                            @if (column.Filterable)
                            {
                                <div class="filter-input">
                                    <input type="text" @oninput="e => ApplyFilter(column.PropertyName, e.Value.ToString())"
                                           placeholder="Filter..."/>
                                </div>
                            }
                            @if (AllowColumnResize)
                            {
                                <div class="column-resizer" @onmousedown="@(e => StartColumnResize(e, column))"></div>
                            }
                        </th>
                    }
                    @if (ActionTemplate != null)
                    {
                        <th>Actions</th>
                    }
                </tr>
                </thead>
                <tbody>
                @foreach (var item in PaginatedItems)
                {
                    <tr class="@(IsSelected(item) ? "selected" : "") @RowClass?.Invoke(item)"
                        @onclick="() => OnRowClick(item)">
                        @if (AllowSelection)
                        {
                            <td class="selection-column">
                                <div class="checkbox-container">
                                    <input type="checkbox" checked="@IsSelected(item)" @onchange="e => ToggleSelection(item)" title="Select Row">
                                </div>
                            </td>
                        }
                        @foreach (var column in Columns)
                        {
                            <td>
                                @if (column.Template != null)
                                {
                                    @column.Template(item)
                                }
                                else
                                {
                                    @column.PropertySelector?.Invoke(item)
                                }
                            </td>
                        }
                        @if (ActionTemplate != null)
                        {
                            <td class="actions">
                                @ActionTemplate(item)
                            </td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>

        @if (ShowPagination)
        {
            <div class="pagination">
                <button @onclick="() => ChangePage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">Previous</button>
                <span>Page @CurrentPage of @TotalPages</span>
                <button @onclick="() => ChangePage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">Next</button>
            </div>
        }
    }
</div>
